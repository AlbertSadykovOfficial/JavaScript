/*

		Контекст выполнения (execution context)

				Контекст выполнения (execution context) — это, если говорить упрощённо, концепция, описывающая окружение, 
				в котором производится выполнение кода на JavaScript. Код всегда выполняется внутри некоего контекста.

				В JavaScript существует три типа контекстов выполнения:

			    1) Глобальный контекст выполнения. Это базовый, используемый по умолчанию контекст выполнения. 
				    	Если некий код находится не внутри какой-нибудь функции, значит этот код принадлежит глобальному контексту. 
				    	Глобальный контекст характеризуется наличием глобального объекта, которым, в случае с браузером, является объект window, 
				    	и тем, что ключевое слово this указывает на этот глобальный объект. В программе может быть лишь один глобальный контекст.
			    2) Контекст выполнения функции. Каждый раз, когда вызывается функция, для неё создаётся новый контекст. 
			    		Каждая функция имеет собственный контекст выполнения. В программе может одновременно присутствовать множество контекстов выполнения функций. 
			    		При создании нового контекста выполнения функции он проходит через определённую последовательность шагов.
			    3) Контекст выполнения функции eval. Код, выполняемый внутри функции eval, также имеет собственный контекст выполнения. 
			    		Однако функцией eval пользуются очень редко.


		Стек выполнения (execution stack), 

				Стек выполнения который ещё называют стеком вызовов (call stack), это LIFO-стек, который используется для хранения контекстов выполнения, 
				создаваемых в ходе работы кода.

				Когда JS-движок начинает обрабатывать скрипт, движок создаёт глобальный контекст выполнения и помещает его в текущий стек. 
				При обнаружении команды вызова функции движок создаёт новый контекст выполнения для этой функции и помещает его в верхнюю часть стека.

				Движок выполняет функцию, контекст выполнения которой находится в верхней части стека. 
				Когда работа функции завершается, её контекст извлекается из стека и управление передаётся тому контексту, 
				который находится в предыдущем элементе стек


		Перед выполнением JavaScript-кода создаётся контекст выполнения. В процессе его создания выполняются три действия:

		    1) Определяется значение this и осуществляется привязка this (this binding).
		    2) Создаётся компонент LexicalEnvironment (лексическое окружение).
		    3) Создаётся компонент VariableEnvironment (окружение переменных).

				1. В контексте выполнения функции значение this зависит от того, как именно была вызвана функция. 
					Если она вызвана в виде метода объекта, тогда значение this привязано к этому объекту. 
					В других случаях this привязывается к глобальному объекту или устанавливается в undefined (в строгом режиме).

				2. Лексическое окружение — это структура, которая хранит сведения о соответствии идентификаторов и переменных. 
					Под «идентификатором» здесь понимается имя переменной или функции, 
					а под «переменной» — ссылка на конкретный объект (в том числе — на функцию) или примитивное значение.

					В лексическом окружении имеется два компонента:
			    	1) Запись окружения. Это место, где хранятся объявления переменных и функций.
			    	2) Ссылка на внешнее окружение. Наличие такой ссылки говорит о том, что у лексического окружения есть доступ к родительскому 
			    	лексическому окружению (области видимости).

			    Существует два типа лексических окружений:
			    	1) Глобальное окружение (или глобальный контекст выполнения) — это лексическое окружение, у которого нет внешнего окружения
			    	2) Окружение функции, в котором, в записи окружения, хранятся переменные, объявленные пользователем.

*/