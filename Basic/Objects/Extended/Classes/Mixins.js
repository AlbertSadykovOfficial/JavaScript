/*

		Примеси

				Примесь – общий термин в объектно-ориентированном программировании: 
				класс(объект), который содержит в себе методы для других классов(объектов)
				
				Некоторые другие языки допускают множественное наследование. 
				JavaScript не поддерживает множественное наследование, можно наследоваться только от
				1 объекта, так как Объект имеет единственный [[Prototype]]. 
				Но с помощью примесей мы можем реализовать нечто похожее, скопировав методы в прототип.

				Мы можем использовать примеси для расширения функциональности классов, например, для обработки событий.

				С примесями могут возникнуть конфликты, если они перезаписывают существующие методы класса. 
				Стоит помнить об этом и быть внимательнее при выборе имён для методов примеси, чтобы их избежать.

*/

		// Пример Примесей, которые наследуются друг от друга.
		let sayMixin = {
		  say(phrase) {
		    alert(phrase);
		  }
		};

		let sayHiMixin = {
		  __proto__: sayMixin, // (или мы можем использовать Object.create для задания прототипа)

		  sayHi() {
		    // вызываем метод родителя
		    super.say(`Привет, ${this.name}`); // (*)
		  },
		  sayBye() {
		    super.say(`Пока, ${this.name}`); // (*)
		  }
		};

		class User {
		  constructor(name) {
		    this.name = name;
		  }
		}

		// копируем методы
		Object.assign(User.prototype, sayHiMixin);

		// теперь User может сказать Привет
		new User("Вася").sayHi(); // Привет, Вася!