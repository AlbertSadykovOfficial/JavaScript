/*

		Сборка мусора

				В JavaScript за сборку мусора отвечает отдельный процесс, называемый сборщиком мусора.

				Основная информация:

				    1) Сборка мусора выполняется автоматически. Мы не можем ускорить или предотвратить её.
				    2) Объекты сохраняются в памяти, пока они достижимы.
				    3) Наличие ссылки не гарантирует, что объект достижим (от корня): 
				    	 несколько взаимосвязанных объектов могут стать недостижимыми как единое целое.

*/

/*
		Алгоритм сборки мусора:

		    1) Сборщик мусора «помечает» (запоминает) все корневые объекты.
		    2) Затем он идёт по их ссылкам и помечает все найденные объекты.
		    3) Затем он идёт по ссылкам помеченных объектов и помечает объекты, на которые есть ссылка от них. 
		    	 Все объекты запоминаются, чтобы в будущем не посещать один и тот же объект дважды.
		    4) …И так далее, пока не будут посещены все ссылки (достижимые от корней).
		    4) Все непомеченные объекты удаляются.

*/

/*
		Концепция Достижимости:

				Если упростить, то «достижимые» значения – это те, которые доступны или используются. Они гарантированно находятся в памяти.
			

				Существует базовое множество достижимых значений, которые не могут быть удалены.

				Например:

				    Глобальные переменные.
				    Локальные переменные и параметры текущей функции.
				    Переменные и параметры других функций в текущей цепочке вложенных вызовов.
				    (некоторые другие внутренние значения)

				Эти значения мы будем называть корнями.

				Любое другое значение считается достижимым, если оно доступно из корня по ссылке или по цепочке ссылок.

*/

		// Пример 1 - одна ссылка на один объект  
		
				let user = { name: "John" };
				user = null; // После это ссылка на объект удалится и сборщик мусора удалит объект { name: "John" }  


		// Пример 2 - две ссылки на один объект  
		
				let user = { name: "John" };
				let admin = user;
				user = null; // После это ссылка на объект удалится, но сборщик мусора не удалит объект, так как существует 2 ссылка.

		// Пример 3 - взаимосвязные объекты

				function marry(man, woman) {
					  woman.husband = man;
					  man.wife = woman;

					  return {
						    father: man,
						    mother: woman
					  }
				}

				let family = marry({
				  	name: "John"
				}, {
				  	name: "Ann"
				});

				delete family.father;					// Удалим ссылку Семья->Папа
				delete family.mother.husband; // Удалим ссылку Жена->Муж

				// После этого у объект John не останется ни одной ВХОДЯЩЕЙ ссылки, и несмотря на то, что из него исходит ссылка Wife->Ann, он удалиться сборщиком мусора.
				// Отсанется только цепочка: <global>->family-> {name: Ann}