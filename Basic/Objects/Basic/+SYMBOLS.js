/*
		Символы

			Символ (symbol) – примитивный тип данных, использующийся для создания уникальных идентификаторов.

			Символы создаются вызовом функции Symbol(), в которую можно передать описание (имя) символа.

			Даже если символы имеют одно и то же имя, это – разные символы. 
			Если мы хотим, чтобы одноимённые символы были равны, то следует использовать глобальный реестр: 
			вызов Symbol.for(key) возвращает (или создаёт) глобальный символ с key в качестве имени. 
			Многократные вызовы команды Symbol.for с одним и тем же аргументом возвращают один и тот же символ.

			!(Символы - не строки и не их части. Они не конвертируются функцией alert в строку, поэтому при ее вызове
				будет ошибка)

*/
		// Создание символа
		let id = Symbol("id");

		let user = {
		  name: "Вася",
		  [id]: 123 // просто "id: 123" не сработает
		};


		// Доказательство того, что символы с одинаковым описанием не равны
		let id1 = Symbol("id");
		let id2 = Symbol("id");

		alert(id1 == id2); // false

/*
		Скрытие свойства - основное преимущество символов

				Символы позволяют создавать «скрытые» свойства объектов, к которым нельзя нечаянно обратиться и перезаписать их из других частей программы.

				Почему же лучше использовать Symbol("id"), а не строку "id"?
				Так как объект user принадлежит стороннему коду, и этот код также работает с ним, то нам не следует добавлять к нему какие-либо поля. 
				Это небезопасно. Но к символу сложно нечаянно обратиться, сторонний код вряд ли его вообще увидит, и, скорее всего, добавление поля к объекту 
				не вызовет никаких проблем.

				Кроме того, предположим, что другой скрипт для каких-то своих целей хочет записать собственный идентификатор в объект user. 
				Этот скрипт может быть какой-то JavaScript-библиотекой, абсолютно не связанной с нашим скриптом.
*/
			let user = { name: "Вася" };

			// Объявляем в нашем скрипте свойство "id"
			user.id = "Наш идентификатор";
			// ...другой скрипт тоже хочет свой идентификатор...
			user.id = "Их идентификатор" 			// Ой! Свойство перезаписано сторонней библиотекой!

			// В свою очередь символ бы атакого не допустил.
			let id = Symbol("id");

			user[id] = "Их идентификатор";

/*

		Символы и перебор ключей "Сокрытие символьных свойств".

			Символы игнорируются обычным перебором (for...in)

			Так как пееребор поэтому (for...in) игнорирует символы, то скопировать объект  полностью не получится.
			Чтобы скопировать объект полностью, нужно использовать Object.assign.
*/

/*


*/

			// Получить символ по ключу:
			Symbol.for(key);

			// получаем ключ по символу:
			Symbol.keyFor(sym)

