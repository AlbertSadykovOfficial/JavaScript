/*

		Class
				
				Class в JS - это разновидность фукнции, но на стероидах. ПРОСТЫЕ классы можно спокойно переписать функцией.

				Свойства функции:

						1) Class Expression == Function Expression
						2) Named Class Expression == Named Function Expression
						3) Есть геттеры/сеттеры

				Отличия от функции:

						1) Функция, созданная с помощью class, помечена специальным внутренним свойством [[FunctionKind]]:"classConstructor"
						2) В отличие от обычных функций, конструктор класса не может быть вызван без new
						3) Методы класса являются неперечислимыми. Определение класса устанавливает флаг enumerable в false для всех методов в "prototype".
						4) Классы всегда используют use strict. Весь код внутри класса автоматически находится в строгом режиме.

						5) При использовании super() методы запоминают свои объекты и их не следует присваивать другим методам, 
						   т.к у них жесткая связь со своим объектом.


				Как работает конструкция class User {...}:

				    1) Создаёт функцию с именем User, которая становится результатом объявления класса. 
				    	 ( Код функции берётся из метода constructor (она будет пустой, если такого метода нет) )
				    2) Сохраняет все методы, такие как sayHi, в User.prototype.

				    При вызове метода объекта new User он будет взят из прототипа, как описано в главе F.prototype. 
				    Таким образом, объекты new User имеют доступ к методам класса.

*/





// Базовый синтаксис класса:
class MyClass {
  prop = value; // свойство
  constructor(...) { // конструктор
    // ...
  }
  method(...) {} // метод
  get something(...) {} // геттер
  set something(...) {} // сеттер
  [Symbol.iterator]() {} // метод с вычисляемым именем (здесь - символом)
  // ...
}



// перепишем класс User на чистых функциях

// 1. Создаём функцию constructor
function User(name) {
  this.name = name;
}
// каждый прототип функции имеет свойство constructor по умолчанию,
// поэтому нам нет необходимости его создавать

// 2. Добавляем метод в прототип
User.prototype.sayHi = function() {
  alert(this.name);
};

// Использование:
let user = new User("Иван");
user.sayHi();