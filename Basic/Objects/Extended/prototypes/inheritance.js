/*

		Прототипное наcледование

				Смысл:

						В основном разные объекты можно как-то обособить в группы по общим признакам:
								кошка, собака, индюк - Животные
								легкоатлет, велосипедист - Спортсмены.

						Соответственно объекты в таких группах имеют некоторые общее свйоства и методы:
								спортмены: Вид спорта, вес, инструмент, ходить_на_тенировку().

						Поэтому: Чтобы не писать много кода и более логически структурировать данные,
										 можно создать прототипы групп для таких объектов с общими свойстваи и методами.


				Создание прототипа и привязка прототипа к объекту:

						!( Установка прототипа через __proto__ устаревшее решение, лучше использовать функции)

						Нужно сначала создать прототип для будущих объектов, с общими свойсвами и методами
						затем, при оздании объектов, указать к какому прототипу они относятся (ссылка)
						в свойсве __proto__:

								let rabbit {
									__proto__: animal
								}

						__proto__ - геттер/сеттер для свойства [[Prototype]]
						[[Prototype]] - ЛИБО null, ЛИБО ссылается на другой объект (на прототип), строка не скатит!!!

						Свойство "prototype" широко используется внутри самого языка JavaScript. 
						Все встроенные функции-конструкторы используют его.

						При этом, прототип используется только для чтения свойств, последующие операции записи/удаления 
						работают напрямую с объектом.
						Исключение - Свойства-аксессоры, которые обрабатывают запись в него функцией-сеттером.


				this:

						Неважно, где находится метод: в объекте или его прототипе. При вызове метода... this — всегда объект перед точкой:

								rabbit.sleep() -> запись будет в rabbit
								animal.sleep() -> запись будет в animal


				Перебор свойств:
						
						Свойства объекта сливаются со свойствами прототипа в одно целое при переборе через (for..in).
						Чтобы избежать такого поведения и перебрать только свойства объекта, нужно использовать
						метод hasOwnProperty, который есть в Object.prototype по наследству выше:
								
								null
								^
								^	[[Prototype]]
								^
								Object.prototype   (hasOwnProperty: function)
								^
								^	[[Prototype]]
								^
								animal
								^
								^	[[Prototype]]
								^
								rabbit

						Перебор всех свойств, в том исле и прототипа:

								for (let prop in rabbit) 
								{
										console.log(prop);
								}

						Перебор только свойств непосредсвенно объекта:
								
								Можно получить только свои ключи:
										
										Object.keys(rabbit)
								
								Перебор: 

										for (let prop in rabbit)
										{
											  let isOwn = rabbit.hasOwnProperty(prop);

											  if (isOwn) {
											    alert(`Our: ${prop}`); // Our: jumps
											  } else {
											    alert(`Inherited: ${prop}`); // Inherited: eats
											  }
										}




*/

// Пример - Прототипное наcледование
let animal = {
  eats: true,

  walk() {
    alert("Animal walk");
  },

  // this - объект перед точкой.
  sleep() {
    this.isSleeping = true;
  },

  set proporties(value) {
    [this.gender, this.color] = value.split(" ");
  },

};

let rabbit = {
  jumps: true,
  __proto__: animal
};


// Запишет метод непосредсвенно в rabbit.
rabbit.walk = function() {
  alert("Rabbit! Bounce-bounce!");
};

// срабатывает сеттер! - Запишет данные в animal 
rabbit.proporties = "Male White"; 