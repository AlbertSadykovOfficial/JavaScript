/*
		Преобразование объектов в примитивы.

				Что произойдёт, если сложить два объекта obj1 + obj2, вычесть один из другого obj1 - obj2 или вывести их на экран, воспользовавшись alert(obj)?
				В этом случае объекты сначала автоматически преобразуются в примитивы, а затем выполняется операция.


				Существует всего 3 типа преобразований (хинтов):

				    "string" (для alert и других операций, которым нужна строка)
				    "number" (для математических операций)
				    "default" (для некоторых операций)

				   (Обычно для встроенных объектов хинт "default" обрабатывается так же, как "number". 
				   	Таким образом, последние два очень часто объединяют вместе.)


				Алгоритм преобразований к примитивам следующий:

				    Сначала вызывается метод obj[Symbol.toPrimitive](hint), если он существует.
				    Иначе, если хинт равен "string"
				        происходит попытка вызвать obj.toString(), затем obj.valueOf(), смотря что есть.
				    Иначе, если хинт равен "number" или "default"
				        происходит попытка вызвать obj.valueOf(), затем obj.toString(), смотря что есть.

				 На практике довольно часто достаточно реализовать только obj.toString() как «универсальный» метод для всех типов преобразований, 
				 возвращающий «читаемое» представление объекта, достаточное для логирования или отладки.

*/

			// Пример - для 
			let user = {
				  name: "John",
				  money: 1000,

				  // Если все отображается как текст, то это не ошибка, а баг, в бразуере все рабоатет.
				  [Symbol.toPrimitive](hint) {
					    alert(`hint: ${hint}`);
					    return hint == "string" ? `{name: "${this.name}"}` : this.money;
				  }
			};

			// демонстрация результатов преобразований:
			alert(user); // hint: string -> {name: "John"}
			alert(+user); // hint: number -> 1000
			alert(user + 500); // hint: default -> 1500


			// Пример:
			let user2 = {
				  name: "John",
				  money: 1000,

				  // для хинта равного "string"
				  toString() {
				    	return `{name: "${this.name}"}`;
				  },

				  // для хинта равного "number" или "default"
				  valueOf() {
				    	return this.money;
				  }

			};

			alert(user2); // toString -> {name: "John"}
			alert(+user2); // valueOf -> 1000
			alert(user2 + 500); // valueOf -> 1500