/*

		Math
			
				Неточные вычисления

						Внутри JavaScript число представлено в виде 64-битного формата IEEE-754. Для хранения числа используется 64 бита: 52 из них используется для хранения цифр, 
						11 из них для хранения положения десятичной точки (если число целое, то хранится 0), и один бит отведён на хранение знака.

						Если число слишком большое, оно переполнит 64-битное хранилище, JavaScript вернёт бесконечность:

								console.log( 1e500 ); // Infinity

				!!  Наиболее часто встречающаяся ошибка при работе с числами в JavaScript – это потеря точности:

							Число хранится в памяти в бинарной форме, как последовательность бит – единиц и нулей. 
							Но дроби, такие как 0.1, 0.2, которые выглядят довольно просто в десятичной системе счисления, 
							на самом деле являются бесконечной дробью в двоичной форме.

							Проблема систем счисления на примерах:
									Десятичная:
											120 / 10 = 12
											10 / 3   = 3.33333(3)
									
									Деление на 10 гарантированно хорошо работает в десятичной системе, но деление на 3 – нет. 
									По той же причине и в двоичной системе счисления, деление на 2 обязательно сработает, а 1/10 становится бесконечной дробью.

							Чтобы избежать такой проблемы, следует округлять числа:

									10.3333.toFixed(2)  // вернет строку "10.33"


*/

		// Потеря точности:
			console.log( 0.1 + 0.2 == 0.3 ); // false
			console.log( 0.1 + 0.2 );

			let sum  = 0.1 + 0.2
			console.log(+sum.toFixed(1) == 0.3) // true