/*

		Обработка ошибок

				Цепочки промисов отлично подходят для перехвата ошибок. 
				Если промис завершается с ошибкой, то управление переходит в БЛИЖАЙШИЙ обработчик ошибок.

				Вокруг функции промиса и обработчиков находится "невидимый try..catch".
				Если происходит исключение, то оно перехватывается, и промис считается отклонённым с этой ошибкой.

				catch перехватывает все виды ошибок в промисах: будь то вызов reject() или ошибка, брошенная в обработчике при помощи throw.
				
				Необходимо размещать .catch там, где мы хотим обработать ошибки и знаем, как это сделать.
				Обработчик может проанализировать ошибку (могут быть полезны пользовательские классы ошибок) и пробросить её, 
				если ничего не знает о ней (возможно, это программная ошибка).
				Можно и совсем не использовать .catch, если нет нормального способа восстановиться после ошибки.

				
				Необработанные ошибки

					Что произойдёт, если ошибка не будет обработана?
					В случае ошибки выполнение должно перейти к ближайшему обработчику ошибок. 
					Но если его нет, значит JavaScript-движок отслеживает такие ситуации и генерирует в этом случае глобальную ошибку. 

					unhandledrejection - глобальное событие, которое является частью стандарта HTML.
					
					Нам следует использовать обработчик события unhandledrejection (для браузеров и аналог для других окружений), 
					чтобы отслеживать необработанные ошибки и информировать о них пользователя (и, возможно, наш сервер),
					благодаря чему наше приложение никогда не будет «просто умирать».

*/

window.addEventListener('unhandledrejection', function(event) {
  // объект события имеет два специальных свойства:
  alert(event.promise); // [object Promise] - промис, который сгенерировал ошибку
  alert(event.reason); // Error: Ошибка! - объект ошибки, которая не была обработана
});

new Promise(function() {
  throw new Error("Ошибка!");
}); // 