/*
		
		Мемоизация

				Мемоизация — это разновидность кэширования. 
				Мемоизация обычно означает кэширование возвращаемых значений функций.

				Мемоизация — сохранение результатов выполнения функций для предотвращения повторных вычислений. 
				Это один из способов оптимизации, применяемый для увеличения скорости выполнения компьютерных программ.
				
				Где применять?
				
						Мемоизация — это компромисс между производительностью и потреблением памяти. 
						Мемоизация хороша для функций, имеющих сравнительно небольшой диапазон входных значений, 
						что позволяет достаточно часто, при повторных вызовах функций, задействовать значения, найденные ранее, 
						не тратя на хранение данных слишком много памяти.

						Пожалуй, лучше всего функции с мемоизацией показывают себя там, где выполняются сложные, ресурсоёмкие вычисления.
						Здесь данная техника может значительно повысить производительность решения.
*/

// Пример построения функции-обертки для мемоизации. 

// простая чистая функция, которая возвращает сумму аргумента и 10
function add(n)
{
 		return (n + 10)
}
console.log('Simple call', add(3));

// простая функция, принимающая другую функцию и
// возвращающая её же, но с мемоизацией
const memoize = (fn) => {
  let cache = {};
  return function (...args) {
    let n = args[0];  // тут работаем с единственным аргументом
    if (n in cache) {
      console.log('Fetching from cache');
      return cache[n];
    }
    else {
      console.log('Calculating result');
      let result = fn(n);
      cache[n] = result;
      return result;
    }
  }
}

// создание функции с мемоизацией из чистой функции 'add'
const memoizedAdd = memoize(add);
console.log(memoizedAdd(3));  // вычислено
console.log(memoizedAdd(3));  // взято из кэша
console.log(memoizedAdd(4));  // вычислено
console.log(memoizedAdd(4));  // взято из кэша

// Для рекурсивных фнукций создание будет отличаться
// Так как рекурсивные функции вызыают себя, а не то, что получается посел мемоизации
const factorial = memoize(
  (x) => {
    if (x === 0) {
      return 1;
    }
    else {
      return x * factorial(x - 1);
    }
  }
);