/*

		Современные prototype и его функциии.
				
				И так, проблемы установки прототипов напрямую через __proto__:
						
						__proto__ – это геттер/сеттер для свойства [[Prototype]], и находится он в Object.prototype

						Встроенный геттер/сеттер __proto__ не безопасен, если мы хотим использовать созданные пользователями ключи в объекте. 
						Как минимум потому, что пользователь может ввести "__proto__" как ключ, от чего может возникнуть ошибка.
						Если повезёт – последствия будут лёгкими, но, вообще говоря, они непредсказуемы.

						Такие ошибки очень неожиданные, могут привести к какой-нибудь фигне, 
						и самое главное - ИХ ОЧЕНЬ СЛОЖНО ОТЛОВИТЬ И ОБНАРУЖИТЬ.  

				Современные способы установки и прямого доступа к прототипу это:

						Object.create(proto[, descriptors]) – создаёт пустой объект со свойством [[Prototype]], указанным как proto (может быть null),
																									и необязательными дескрипторами свойств.
						Object.getPrototypeOf(obj) – возвращает свойство [[Prototype]] объекта obj (то же самое, что и геттер __proto__).
						Object.setPrototypeOf(obj, proto) – устанавливает свойство [[Prototype]] объекта obj как proto (то же самое, что и сеттер __proto__).
				
				
				Простейший объект без наследования:

						Если мы установим передадим конструктору null, то получим "простейший" объект без прототипа, который ни на кого не ссылаеся.
						Такие объекты можно использовать как «чистые словари», у них нет проблем с использованием строки "__proto__" в качестве ключа:

								Object.create(null)
				
				Копирование объекта:

						let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
*/

		// Пример создания простейшего объекта, которому можно прописать свойство __proto__
		// С обчным объектом присвоение __proto__ проигнорируется, т.к. оно должно быть либо объектом, либо null, а строка не может стать прототипом.

				let obj = Object.create(null);

				let key = prompt("What's the key?", "__proto__");
				obj[key] = "some value";

				alert(obj[key]); // "some value"


		// Добавить доп. свойство объекту через Object.create :

				let animal = {
				  	eats: true
				};

				let rabbit = Object.create(animal, {
					  jumps: {
					    	value: true
					  }
				});

				alert(rabbit.jumps); // true